generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  customer
  admin
}

enum OrderStatus {
  pending     // TodavÃ­a no pagÃ³
  paid        // PagÃ³, esperando envÃ­o
  processing  // Preparando el pedido
  shipped     // Enviado
  delivered   // Entregado
  cancelled   // Cancelado
}


enum ShippingMethod {
  domicilio
  sucursal
}

enum PetType {
  dog
  cat
  both
}

enum DiscountType {
  percentage
  fixed
  free_shipping
}



enum PaymentStatus {
  pending
  paid
  failed
}

enum NotificationType {
  order
  promo
  payment
  system
}



model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  password       String
  role           Role     @default(customer)
  phone          String?
  isEmailVerified           Boolean   @default(false)
  emailVerificationCode     String?
  emailVerificationExpires  DateTime?
  resetPasswordCode         String?
  resetPasswordExpiresAt    DateTime?

  addresses      Address[]
  cart           Cart?
  orders         Order[]
  reviews        Review[]
  coupons        UserCoupon[]
  notifications  Notification[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Address {
  id         String   @id @default(uuid())
  postalCode String
  nombre     String
  apellido   String
  telefono   String
  dni        String
  provincia  String
  localidad  String
  calle      String
  piso       String?
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  orders     Order[]

  @@unique([id, userId])
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  weight      Float?
  size        String[]
  color       String[]
  sku         String?
  petType     PetType    @default(both)
  isActive    Boolean    @default(true)
  images      Image[]
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  String
  stockNotifications StockNotification[]
  reviews     Review[]
  cartItems   CartItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  orderItems  OrderItem[]
  anonCartItems AnonCartItem[]
}

model Image {
  id        String   @id @default(uuid())
  url       String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  image       String?
  petType  PetType 
  products    Product[]
}

model StockNotification {
  id         String   @id @default(uuid())
  email      String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  notified   Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Cart {
  id        String    @id @default(uuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  items     CartItem[]
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  color     String   
  size      String   
  quantity  Int
}

model Order {
  id             String         @id @default(uuid())
  orderNumber    String         @unique
  user           User           @relation(fields: [userId], references: [id])
  userId         String
  address        Address        @relation(fields: [addressId], references: [id])
  addressId      String
  shippingMethod ShippingMethod
  coupon         Coupon?        @relation(fields: [couponId], references: [id])
  couponId       String?
  items          OrderItem[]
  payment        Payment?
  totalAmount    Float
  trackingNumber String?        // NÃºmero de seguimiento del envÃ­o
  status         OrderStatus    @default(pending)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  unitPrice Float
  color     String   // ðŸ‘ˆ este campo debe existir
  size      String   // ðŸ‘ˆ este tambiÃ©n
}

model Payment {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @unique
  method    String   // 'transferencia' | 'mercadopago'
  status    String   // 'pending' | 'paid' | 'failed'
  amount    Float
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  comment   String
  rating    Int
  createdAt DateTime @default(now())
}



model Coupon {
  id            String        @id @default(uuid())
  code          String        @unique
  description   String?
  discountType  DiscountType
  value         Float
  maxUses       Int
  usedCount     Int           @default(0)
  userLimit     Int
  expirationDate DateTime?
  active        Boolean       @default(true)
  orders        Order[]
  userCoupons   UserCoupon[]
}

model UserCoupon {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  coupon    Coupon   @relation(fields: [couponId], references: [id])
  couponId  String
  usedAt    DateTime
}

model Notification {
  id        String            @id @default(uuid())
  user      User              @relation(fields: [userId], references: [id])
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean           @default(false)
  createdAt DateTime          @default(now())
}

model AnonCart {
  id        String           @id @default(uuid())
  items     AnonCartItem[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model AnonCartItem {
  id        String   @id @default(uuid())
  cart      AnonCart @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  color     String
  size      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}