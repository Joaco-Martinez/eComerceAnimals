generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  customer
  admin
}

enum DiscountType {
  percentage
  fixed
  free_shipping
}

enum OrderStatus {
  pending
  paid
  shipped
  delivered
  cancelled
}

enum PaymentStatus {
  pending
  paid
  failed
}

enum NotificationType {
  order
  promo
  payment
  system
}

model User {
  id         Int           @id @default(autoincrement())
  name       String
  email      String        @unique
  password   String
  role       Role          @default(customer)
  phone      String?
  addresses  Address[]
  cart       Cart?
  orders     Order[]
  reviews    Review[]
  coupons    UserCoupon[]
  notifications Notification[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Address {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  street     String
  number     String
  city       String
  province   String
  postalCode String
  isPrimary  Boolean


  orders     Order[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  sku         String?
  isActive    Boolean      @default(true)
  images      Image[]
  category    Category     @relation(fields: [categoryId], references: [id])
  categoryId  Int
  reviews     Review[]
  cartItems   CartItem[]   // Added relation to CartItem
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  orderItems OrderItem[]
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  image       String?
  products    Product[]
}

model Cart {
  id        Int         @id @default(autoincrement())
  userId    Int         @unique
  user      User        @relation(fields: [userId], references: [id])
  items     CartItem[]
  updatedAt DateTime    @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  address     Address     @relation(fields: [addressId], references: [id])
  addressId   Int
  coupon      Coupon?     @relation(fields: [couponId], references: [id])
  couponId    Int?
  items       OrderItem[]
  payment     Payment?
  totalAmount Float
  status      OrderStatus @default(pending)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int
  unitPrice  Float
}

model Payment {
  id        Int           @id @default(autoincrement())
  order     Order         @relation(fields: [orderId], references: [id])
  orderId   Int           @unique
  amount    Float
  method    String
  status    PaymentStatus @default(pending)
  paidAt    DateTime?
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  comment   String
  rating    Int       // 1 a 5
  createdAt DateTime  @default(now())
}

model Coupon {
  id          Int           @id @default(autoincrement())
  code        String        @unique
  description String?
  discountType DiscountType
  value       Float
  maxUses     Int
  usedCount   Int           @default(0)
  userLimit   Int
  expirationDate DateTime?
  active      Boolean       @default(true)
  orders      Order[]
  userCoupons UserCoupon[]
}

model UserCoupon {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  coupon    Coupon   @relation(fields: [couponId], references: [id])
  couponId  Int
  usedAt    DateTime
}

model Notification {
  id        Int              @id @default(autoincrement())
  user      User             @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
}
